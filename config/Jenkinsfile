pipeline {
    agent any

    environment {
        awsecrRegistry = '730335456215.dkr.ecr.ap-northeast-2.amazonaws.com/wordpress-ecr'
        awsecrRegistryCredential = 'credential-AWS-ECR'
        githubCredential = 'credential-github'
        gitEmail = '2071ly@gmail.com'
        gitName = 'EO7I'
    }

    stages {
        stage('Checkout Application Git Branch') {
            steps {
                checkout([$class: 'GitSCM', branches: [[name: '*/main']], extensions: [], userRemoteConfigs: [[credentialsId: githubCredential, url: 'https://github.com/EO7I/Group1.git']]])
            }
            post {
                failure {
                    echo 'Repository clone failure'
                }
                success {
                    echo 'Repository clone success'
                }
            }
        }

        stage('Check for Changes') {
            steps {
                script {
                    def changes = currentBuild.changeSets.collectMany { changeSet ->
                        changeSet.items.collect { it.paths }
                    }
                    if (!changes.any { it.path.contains('config/') }) {
                        currentBuild.result = 'NOT_BUILT'
                        error 'No relevant changes detected'
                    }
                }
            }
        }

        stage('Docker Image Build') {
            when {
                expression { currentBuild.result != 'NOT_BUILT' }
            }
            steps {
                sh "docker build . -t ${awsecrRegistry}:${currentBuild.number}"
                sh "docker build . -t ${awsecrRegistry}:latest"
            }
            post {
                failure {
                    echo 'Docker image build failure'
                }
                success {
                    echo 'Docker image build success'
                }
            }
        }

        stage('Docker Image Push') {
            when {
                expression { currentBuild.result != 'NOT_BUILT' }
            }
            steps {
                withDockerRegistry([url: "https://${awsecrRegistry}", credentialsId: "ecr:ap-northeast-2:${awsecrRegistryCredential}"]) {
                    sh "docker push ${awsecrRegistry}:${currentBuild.number}"
                    sh "docker push ${awsecrRegistry}:latest"
                    sleep 10
                }
            }
            post {
                failure {
                    echo 'Docker Image Push failure'
                    sh "docker rmi ${awsecrRegistry}:${currentBuild.number}"
                    sh "docker rmi ${awsecrRegistry}:latest"
                }
                success {
                    echo 'Docker Image Push success'
                    sh "docker rmi ${awsecrRegistry}:${currentBuild.number}"
                    sh "docker rmi ${awsecrRegistry}:latest"
                }
            }
        }

        stage('Deploy') {
            when {
                expression { currentBuild.result != 'NOT_BUILT' }
            }
            steps {
                git credentialsId: githubCredential,
                    url: 'https://github.com/EO7I/Group1.git',
                    branch: 'main/config'

                sh "git config --global user.email ${gitEmail}"
                sh "git config --global user.name ${gitName}"
                sh "cd web && kustomize edit set image ${awsecrRegistry}:${currentBuild.number}"
                sh "git add -A"
                sh "git status"
                sh "git commit -m 'update the image tag'"
                sh "git branch -M main"
            }
        }

        stage('Push to Git Repository') {
            when {
                expression { currentBuild.result != 'NOT_BUILT' }
            }
            steps {
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: githubCredential, usernameVariable: 'GIT_USERNAME', passwordVariable: 'GIT_PASSWORD']]) {
                     sh "git push https://${GIT_USERNAME}:${GIT_PASSWORD}@github.com/EO7I/Group1.git"
                }
            }
        }
    }
}
